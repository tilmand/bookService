// Code generated by MockGen. DO NOT EDIT.
// Source: bookService/store (interfaces: Database)

// Package mocks is a generated GoMock package.
package mocks

import (
	model "bookService/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDatabase is a mock of Database interface.
type MockDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseMockRecorder
}

// MockDatabaseMockRecorder is the mock recorder for MockDatabase.
type MockDatabaseMockRecorder struct {
	mock *MockDatabase
}

// NewMockDatabase creates a new mock instance.
func NewMockDatabase(ctrl *gomock.Controller) *MockDatabase {
	mock := &MockDatabase{ctrl: ctrl}
	mock.recorder = &MockDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabase) EXPECT() *MockDatabaseMockRecorder {
	return m.recorder
}

// GetByLogin mocks base method.
func (m *MockDatabase) GetByLogin(arg0 string) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByLogin", arg0)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByLogin indicates an expected call of GetByLogin.
func (mr *MockDatabaseMockRecorder) GetByLogin(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByLogin", reflect.TypeOf((*MockDatabase)(nil).GetByLogin), arg0)
}

// Insert mocks base method.
func (m *MockDatabase) Insert(arg0 model.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockDatabaseMockRecorder) Insert(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockDatabase)(nil).Insert), arg0)
}

// SaveRecoveryToken mocks base method.
func (m *MockDatabase) SaveRecoveryToken(arg0 uint64, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveRecoveryToken", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveRecoveryToken indicates an expected call of SaveRecoveryToken.
func (mr *MockDatabaseMockRecorder) SaveRecoveryToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveRecoveryToken", reflect.TypeOf((*MockDatabase)(nil).SaveRecoveryToken), arg0, arg1)
}

// VerifyRecoveryToken mocks base method.
func (m *MockDatabase) VerifyRecoveryToken(arg0 string) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyRecoveryToken", arg0)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyRecoveryToken indicates an expected call of VerifyRecoveryToken.
func (mr *MockDatabaseMockRecorder) VerifyRecoveryToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyRecoveryToken", reflect.TypeOf((*MockDatabase)(nil).VerifyRecoveryToken), arg0)
}
