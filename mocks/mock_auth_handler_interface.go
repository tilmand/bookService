// Code generated by MockGen. DO NOT EDIT.
// Source: http/auth_handler.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
)

// MockAuthHandlerInterface is a mock of AuthHandlerInterface interface.
type MockAuthHandlerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockAuthHandlerInterfaceMockRecorder
}

// MockAuthHandlerInterfaceMockRecorder is the mock recorder for MockAuthHandlerInterface.
type MockAuthHandlerInterfaceMockRecorder struct {
	mock *MockAuthHandlerInterface
}

// NewMockAuthHandlerInterface creates a new mock instance.
func NewMockAuthHandlerInterface(ctrl *gomock.Controller) *MockAuthHandlerInterface {
	mock := &MockAuthHandlerInterface{ctrl: ctrl}
	mock.recorder = &MockAuthHandlerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthHandlerInterface) EXPECT() *MockAuthHandlerInterfaceMockRecorder {
	return m.recorder
}

// Recover mocks base method.
func (m *MockAuthHandlerInterface) Recover(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Recover", c)
}

// Recover indicates an expected call of Recover.
func (mr *MockAuthHandlerInterfaceMockRecorder) Recover(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recover", reflect.TypeOf((*MockAuthHandlerInterface)(nil).Recover), c)
}

// Refresh mocks base method.
func (m *MockAuthHandlerInterface) Refresh(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Refresh", c)
}

// Refresh indicates an expected call of Refresh.
func (mr *MockAuthHandlerInterfaceMockRecorder) Refresh(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Refresh", reflect.TypeOf((*MockAuthHandlerInterface)(nil).Refresh), c)
}

// SetNewPassword mocks base method.
func (m *MockAuthHandlerInterface) SetNewPassword(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetNewPassword", c)
}

// SetNewPassword indicates an expected call of SetNewPassword.
func (mr *MockAuthHandlerInterfaceMockRecorder) SetNewPassword(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNewPassword", reflect.TypeOf((*MockAuthHandlerInterface)(nil).SetNewPassword), c)
}

// SignIn mocks base method.
func (m *MockAuthHandlerInterface) SignIn(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SignIn", c)
}

// SignIn indicates an expected call of SignIn.
func (mr *MockAuthHandlerInterfaceMockRecorder) SignIn(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignIn", reflect.TypeOf((*MockAuthHandlerInterface)(nil).SignIn), c)
}

// SignUp mocks base method.
func (m *MockAuthHandlerInterface) SignUp(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SignUp", c)
}

// SignUp indicates an expected call of SignUp.
func (mr *MockAuthHandlerInterfaceMockRecorder) SignUp(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUp", reflect.TypeOf((*MockAuthHandlerInterface)(nil).SignUp), c)
}
